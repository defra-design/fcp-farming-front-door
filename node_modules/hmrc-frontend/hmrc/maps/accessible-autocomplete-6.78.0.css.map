{"version":3,"sources":["file:/home/jenkins/workspace/PlatUI/Libraries/hmrc-frontend/node_modules/accessible-autocomplete/dist/accessible-autocomplete.min.css","accessible-autocomplete.css","govuk-frontend/dist/govuk/settings/govuk-frontend/dist/govuk/tools/govuk-frontend/dist/govuk/helpers/accessible-autocomplete/dist/accessible-autocomplete.min%22;%0A%0A.autocomplete__wrapper,%0A.autocomplete__input,%0A.autocomplete__option,%0A.autocomplete__hint%20%7B%0A%20%20@include%20govuk-font($size:%2019);%0A%7D%0A%0A/%20the%20following%20makes%20the%20autocomplete%20inherit%20error%20styles%0A/%20it%20won't%20work%20in%20IE11%20but%20selects%20won't%20be%20enhanced%20into%20autocompletes%20in%20IE11%0A%0A.govuk-form-group--error%20div:has(+%20.govuk-select--error%5Bdata-module='hmrc-accessible-autocomplete'%5D)%20%3E%20.autocomplete__wrapper%20.autocomplete__input%20%7B%0A%20%20border-color:%20%23d4351c;%0A%7D%0A%0A/%20the%20following%20makes%20the%20dropdown%20arrow%20appear%20when%20showing%20all%20values%0A%0A.autocomplete__dropdown-arrow-down%20%7B%0A%20%20z-index:%200;%0A%20%20pointer-events:%20none;%0A%7D%0A","file:/home/jenkins/workspace/PlatUI/Libraries/hmrc-frontend/node_modules/govuk-frontend/dist/govuk/helpers/_typography.scss","file:/home/jenkins/workspace/PlatUI/Libraries/hmrc-frontend/node_modules/govuk-frontend/dist/govuk/settings/_typography-font.scss","file:/home/jenkins/workspace/PlatUI/Libraries/hmrc-frontend/node_modules/govuk-frontend/dist/govuk/vendor/_sass-mq.scss"],"names":[],"mappings":"AAAA,uBAAuB,iBCgDvB,CDhDyC,yCAAyC,uBAAA,CAAwB,oBAAA,CAAA,eAAA,CAAgB,wBAAA,CAAyB,eAAA,CAAgB,6BAAA,CAAA,qBAAA,CAAsB,aAAA,CAAc,gBAAA,CAAiB,eAAA,CAAgB,UC4DxO,CD5DmP,qBAAqB,8BAAA,CAA6B,iBCiErS,CDjEuT,oBAAoB,aAAA,CAAc,iBCsEzV,CDtE2W,8BAA8B,WC0EzY,CD1EqZ,8BAA8B,kCAAA,CAAA,0BAAA,CAA2B,sBAAA,CAAuB,gBCgFre,CDhFsf,sCAAsC,cAAA,CAAe,wBCqF3iB,CDrFokB,mCAAmC,oBAAA,CAAqB,WAAA,CAAY,iBAAA,CAAkB,SAAA,CAAU,QAAA,CAAS,UAAA,CAAW,UC+FxrB,CD/FmsB,oBAAoB,qBAAA,CAAsB,wBAAA,CAAyB,YAAA,CAAa,aAAA,CAAc,QAAA,CAAS,gBAAA,CAAiB,iBAAA,CAAkB,SAAA,CAAU,UAAA,CAAW,sBC4Gl2B,CD5Gy3B,6BAA6B,aCgHt5B,CDhHo6B,4BAA4B,YCoHh8B,CDpH68B,6BAA6B,6CAAA,CAAA,qCAAA,CAAsC,MAAA,CAAO,iBAAA,CAAkB,QAAA,CAAS,WC4HljC,CD5H8jC,4BAA4B,iBCgI1lC,CDhI4mC,sBAAsB,+BAAA,CAAgC,mBAAA,CAAoB,oBAAA,CAAqB,oBAAA,CAAqB,cAAA,CAAe,aAAA,CAAc,iBC0I7vC,CD1I+wC,wBAAwB,mBC8IvyC,CD9I2zC,oCAAoC,kBCkJ/1C,CDlJk3C,mCAAmC,qBCsJr5C,CDtJ26C,2BAA2B,wBC0Jt8C,CD1J+9C,2DAA2D,wBAAA,CAAyB,oBAAA,CAAqB,UAAA,CAAW,YCiKnlD,CDjKgmD,yDAAyD,oBAAoB,sBCsK3qD,CDtKksD,sBAAsB,sBAAA,CAAuB,eC0K/uD,CD1K+vD,2DAA2D,0BAAA,CAA2B,6BAAA,CAA8B,yBAAA,CAA0B,mBAAA,CAAoB,sBAAA,CAAuB,wBAAA,CAAyB,8BCmLj9D,CACF,CDpLm/D,kCAAkC,wBAAA,CAAyB,aAAA,CAAc,kBCyL5jE,CDzL+kE,+DAA+D,cAAA,CAAe,eC8L7pE,CD9L6qE,0CAA0C,WCkMvtE,CDlMmuE,yBAAyB,+DAA+D,mBAAA,CAAoB,wBCwM70E,CACF,CClMA,sFCQE,0CCFkB,CDGlB,kCAAA,CACA,iCAAA,CAkCA,eAAA,CA4LI,cAJc,CAKd,gBF3BN,CIeQ,aH7NR,sFCmBI,sBFkMF,CACF,CIOQ,6BH7NR,sFCiPQ,mBAbY,CAcZ,wBFpBN,CACF,CIFQ,aH7NR,sFC4OQ,cATQ,CAUR,gBFNN,CACF,CC9NA,8IACE,oBDiOF,CC5NA,mCACE,SAAA,CACA,mBD+NF","file":"../accessible-autocomplete-6.78.0.css","sourcesContent":[".autocomplete__wrapper{position:relative}.autocomplete__hint,.autocomplete__input{-webkit-appearance:none;appearance:none;border:2px solid #0b0c0c;border-radius:0;box-sizing:border-box;height:2.5rem;line-height:1.25;margin-bottom:0;width:100%}.autocomplete__input{background-color:transparent;position:relative}.autocomplete__hint{color:#505a5f;position:absolute}.autocomplete__input--default{padding:5px}.autocomplete__input--focused{box-shadow:inset 0 0 0 2px;outline:3px solid #fd0;outline-offset:0}.autocomplete__input--show-all-values{cursor:pointer;padding:5px 35px 5px 5px}.autocomplete__dropdown-arrow-down{display:inline-block;height:24px;position:absolute;right:8px;top:10px;width:24px;z-index:-1}.autocomplete__menu{background-color:#fff;border:2px solid #0b0c0c;border-top:0;color:#0b0c0c;margin:0;max-height:342px;overflow-x:hidden;padding:0;width:100%;width:calc(100% - 4px)}.autocomplete__menu--visible{display:block}.autocomplete__menu--hidden{display:none}.autocomplete__menu--overlay{box-shadow:0 2px 6px rgba(0,0,0,.257);left:0;position:absolute;top:100%;z-index:100}.autocomplete__menu--inline{position:relative}.autocomplete__option{border-bottom:1px solid #b1b4b6;border-left-width:0;border-right-width:0;border-top-width:1px;cursor:pointer;display:block;position:relative}.autocomplete__option>*{pointer-events:none}.autocomplete__option:first-of-type{border-top-width:0}.autocomplete__option:last-of-type{border-bottom-width:0}.autocomplete__option--odd{background-color:#f3f2f1}.autocomplete__option--focused,.autocomplete__option:hover{background-color:#1d70b8;border-color:#1d70b8;color:#fff;outline:none}@media (-ms-high-contrast:active),(forced-colors:active){.autocomplete__menu{border-color:FieldText}.autocomplete__option{background-color:Field;color:FieldText}.autocomplete__option--focused,.autocomplete__option:hover{background-color:Highlight;background-color:SelectedItem;border-color:SelectedItem;color:HighlightText;color:SelectedItemText;forced-color-adjust:none;outline-color:SelectedItemText}}.autocomplete__option--no-results{background-color:#f3f2f1;color:#505a5f;cursor:not-allowed}.autocomplete__hint,.autocomplete__input,.autocomplete__option{font-size:1rem;font-weight:400}.autocomplete__hint,.autocomplete__option{padding:5px}@media (min-width:641px){.autocomplete__hint,.autocomplete__input,.autocomplete__option{font-size:1.1875rem;line-height:1.3157894737}}\n\n/*# sourceMappingURL=accessible-autocomplete.min.css.map*/","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.autocomplete__wrapper {\n  position: relative;\n}\n\n.autocomplete__hint, .autocomplete__input {\n  -webkit-appearance: none;\n  appearance: none;\n  border: 2px solid #0b0c0c;\n  border-radius: 0;\n  box-sizing: border-box;\n  height: 2.5rem;\n  line-height: 1.25;\n  margin-bottom: 0;\n  width: 100%;\n}\n\n.autocomplete__input {\n  background-color: transparent;\n  position: relative;\n}\n\n.autocomplete__hint {\n  color: #505a5f;\n  position: absolute;\n}\n\n.autocomplete__input--default {\n  padding: 5px;\n}\n\n.autocomplete__input--focused {\n  box-shadow: inset 0 0 0 2px;\n  outline: 3px solid #fd0;\n  outline-offset: 0;\n}\n\n.autocomplete__input--show-all-values {\n  cursor: pointer;\n  padding: 5px 35px 5px 5px;\n}\n\n.autocomplete__dropdown-arrow-down {\n  display: inline-block;\n  height: 24px;\n  position: absolute;\n  right: 8px;\n  top: 10px;\n  width: 24px;\n  z-index: -1;\n}\n\n.autocomplete__menu {\n  background-color: #fff;\n  border: 2px solid #0b0c0c;\n  border-top: 0;\n  color: #0b0c0c;\n  margin: 0;\n  max-height: 342px;\n  overflow-x: hidden;\n  padding: 0;\n  width: 100%;\n  width: calc(100% - 4px);\n}\n\n.autocomplete__menu--visible {\n  display: block;\n}\n\n.autocomplete__menu--hidden {\n  display: none;\n}\n\n.autocomplete__menu--overlay {\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.257);\n  left: 0;\n  position: absolute;\n  top: 100%;\n  z-index: 100;\n}\n\n.autocomplete__menu--inline {\n  position: relative;\n}\n\n.autocomplete__option {\n  border-bottom: 1px solid #b1b4b6;\n  border-left-width: 0;\n  border-right-width: 0;\n  border-top-width: 1px;\n  cursor: pointer;\n  display: block;\n  position: relative;\n}\n\n.autocomplete__option > * {\n  pointer-events: none;\n}\n\n.autocomplete__option:first-of-type {\n  border-top-width: 0;\n}\n\n.autocomplete__option:last-of-type {\n  border-bottom-width: 0;\n}\n\n.autocomplete__option--odd {\n  background-color: #f3f2f1;\n}\n\n.autocomplete__option--focused, .autocomplete__option:hover {\n  background-color: #1d70b8;\n  border-color: #1d70b8;\n  color: #fff;\n  outline: none;\n}\n\n@media (-ms-high-contrast: active), (forced-colors: active) {\n  .autocomplete__menu {\n    border-color: FieldText;\n  }\n  .autocomplete__option {\n    background-color: Field;\n    color: FieldText;\n  }\n  .autocomplete__option--focused, .autocomplete__option:hover {\n    background-color: Highlight;\n    background-color: SelectedItem;\n    border-color: SelectedItem;\n    color: HighlightText;\n    color: SelectedItemText;\n    forced-color-adjust: none;\n    outline-color: SelectedItemText;\n  }\n}\n.autocomplete__option--no-results {\n  background-color: #f3f2f1;\n  color: #505a5f;\n  cursor: not-allowed;\n}\n\n.autocomplete__hint, .autocomplete__input, .autocomplete__option {\n  font-size: 1rem;\n  font-weight: 400;\n}\n\n.autocomplete__hint, .autocomplete__option {\n  padding: 5px;\n}\n\n@media (min-width: 641px) {\n  .autocomplete__hint, .autocomplete__input, .autocomplete__option {\n    font-size: 1.1875rem;\n    line-height: 1.3157894737;\n  }\n}\n\n.autocomplete__wrapper,\n.autocomplete__input,\n.autocomplete__option,\n.autocomplete__hint {\n  font-family: \"GDS Transport\", arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  font-weight: 400;\n  font-size: 1rem;\n  line-height: 1.25;\n}\n@media print {\n  .autocomplete__wrapper,\n  .autocomplete__input,\n  .autocomplete__option,\n  .autocomplete__hint {\n    font-family: sans-serif;\n  }\n}\n@media (min-width: 40.0625em) {\n  .autocomplete__wrapper,\n  .autocomplete__input,\n  .autocomplete__option,\n  .autocomplete__hint {\n    font-size: 1.1875rem;\n    line-height: 1.3157894737;\n  }\n}\n@media print {\n  .autocomplete__wrapper,\n  .autocomplete__input,\n  .autocomplete__option,\n  .autocomplete__hint {\n    font-size: 14pt;\n    line-height: 1.15;\n  }\n}\n\n.govuk-form-group--error div:has(+ .govuk-select--error[data-module=hmrc-accessible-autocomplete]) > .autocomplete__wrapper .autocomplete__input {\n  border-color: #d4351c;\n}\n\n.autocomplete__dropdown-arrow-down {\n  z-index: 0;\n  pointer-events: none;\n}","$govuk-include-default-font-face: false;\n\n@import \"../../govuk-frontend/dist/govuk/settings/index\";\n@import \"../../govuk-frontend/dist/govuk/tools/index\";\n@import \"../../govuk-frontend/dist/govuk/helpers/index\";\n@import \"../../accessible-autocomplete/dist/accessible-autocomplete.min\";\n\n.autocomplete__wrapper,\n.autocomplete__input,\n.autocomplete__option,\n.autocomplete__hint {\n  @include govuk-font($size: 19);\n}\n\n// the following makes the autocomplete inherit error styles\n// it won't work in IE11 but selects won't be enhanced into autocompletes in IE11\n\n.govuk-form-group--error div:has(+ .govuk-select--error[data-module='hmrc-accessible-autocomplete']) > .autocomplete__wrapper .autocomplete__input {\n  border-color: #d4351c;\n}\n\n// the following makes the dropdown arrow appear when showing all values\n\n.autocomplete__dropdown-arrow-down {\n  z-index: 0;\n  pointer-events: none;\n}\n","////\n/// @group helpers/typography\n////\n\n@import \"../tools/px-to-rem\";\n\n/// 'Common typography' helper\n///\n/// Sets the font family and associated properties, such as font smoothing. Also\n/// overrides the font for print.\n///\n/// @param {List} $font-family [$govuk-font-family] Font family to use\n/// @access public\n\n@mixin govuk-typography-common($font-family: $govuk-font-family) {\n  font-family: $font-family;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  // If the user is using the default GDS Transport font we need to include\n  // the font-face declarations.\n  @if $govuk-include-default-font-face {\n    @include _govuk-font-face-gds-transport;\n  }\n\n  @include govuk-media-query($media-type: print) {\n    font-family: $govuk-font-family-print;\n  }\n}\n\n/// Text colour helper\n///\n/// Sets the text colour, including a suitable override for print.\n///\n/// @access public\n\n@mixin govuk-text-colour {\n  color: $govuk-text-colour;\n\n  @include govuk-media-query($media-type: print) {\n    color: $govuk-print-text-colour;\n  }\n}\n\n/// Regular font weight helper\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-typography-weight-regular($important: false) {\n  font-weight: $govuk-font-weight-regular if($important, !important, null);\n}\n\n/// Bold font weight helper\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-typography-weight-bold($important: false) {\n  font-weight: $govuk-font-weight-bold if($important, !important, null);\n}\n\n/// Tabular number helper\n///\n/// Switches numerical glyphs (0–9) to use alternative forms with a\n/// monospaced bounding box. This ensures that columns of numbers, such\n/// as those in tables, remain horizontally aligned with one another.\n/// This also has the useful side effect of making numbers more legible\n/// in some situations, such as reference codes, as the numbers are more\n/// distinct and visually separated from one another.\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally Used to create override classes.\n/// @access public\n\n@mixin govuk-font-tabular-numbers($important: false) {\n  font-variant-numeric: tabular-nums if($important, !important, null);\n}\n\n/// Word break helper\n///\n/// Forcibly breaks long words that lack spaces, such as email addresses,\n/// across multiple lines when they wouldn't otherwise fit.\n///\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`. Generally used to create override classes.\n/// @access public\n\n@mixin govuk-text-break-word($important: false) {\n  // IE 11 and Edge 16–17 only support the non-standard `word-wrap` property\n  word-wrap: break-word if($important, !important, null);\n\n  // All other browsers support `overflow-wrap`\n  overflow-wrap: break-word if($important, !important, null);\n}\n\n/// Convert line-heights specified in pixels into a relative value, unless\n/// they are already unit-less (and thus already treated as relative values)\n/// or the units do not match the units used for the font size.\n///\n/// @param {Number} $line-height Line height\n/// @param {Number} $font-size Font size\n/// @return {Number} The line height as either a relative value or unmodified\n///\n/// @access private\n\n@function _govuk-line-height($line-height, $font-size) {\n  @if not unitless($line-height) and unit($line-height) == unit($font-size) {\n    $line-height: $line-height / $font-size;\n  }\n\n  @return $line-height;\n}\n\n/// Font size and line height helper\n///\n/// @param {Number} $size - Point from the type scale (the size as it would\n///   appear on tablet and above)\n/// @param {Number} $override-line-height [false] - Non responsive custom line\n///   height. Omit to use the line height from the font map.\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`.\n///\n/// @throw if `$size` is not a valid point from the type scale\n///\n/// @access public\n///\n/// @alias govuk-font-size\n/// @deprecated Use `govuk-font-size` instead\n\n@mixin govuk-typography-responsive($size, $override-line-height: false, $important: false) {\n  @include _warning(\n    \"govuk-typography-responsive\",\n    \"govuk-typography-responsive is deprecated. Use govuk-font-size instead.\"\n  );\n  @include govuk-font-size($size, $override-line-height, $important);\n}\n\n/// Font size and line height helper\n///\n/// Takes a point from the responsive 'font map' as an argument (the size as it\n/// would appear on tablet and above), and uses it to create font-size and\n/// line-height declarations for different breakpoints, and print.\n///\n/// Example font map:\n///\n/// ```scss\n/// 19: (\n///   null: (\n///     font-size: 16px,\n///     line-height: 20px\n///   ),\n///   tablet: (\n///     font-size: 19px,\n///     line-height: 25px\n///   ),\n///   print: (\n///     font-size: 14pt,\n///     line-height: 1.15\n///   )\n/// );\n/// ```\n///\n/// @param {Number | String} $size - Point from the type scale (the size as\n///   it would appear on tablet and above)\n/// @param {Number} $line-height [false] - Non responsive custom line\n///   height. Omit to use the line height from the font map.\n/// @param {Boolean} $important [false] - Whether to mark declarations as\n///   `!important`.\n///\n/// @throw if `$size` is not a valid point from the type scale\n///\n/// @access public\n\n@mixin govuk-font-size($size, $line-height: false, $important: false) {\n  // Flag font sizes that start with underscores so we can suppress warnings on\n  // deprecated sizes used internally, for example `govuk-font($size: \"_14\")`\n  $size-internal-use-only: str-slice(#{$size}, 1, 1) == \"_\";\n\n  // Remove underscore from font sizes flagged for internal use\n  @if $size-internal-use-only {\n    $size: str-slice(#{$size}, 2);\n  }\n\n  // Check for a font map exactly matching the given size\n  $font-map: map-get($govuk-typography-scale, $size);\n\n  // No match? Try with string type (e.g. $size: \"16\" not 16)\n  @if not $font-map {\n    @each $font-size in map-keys($govuk-typography-scale) {\n      @if not $font-map and \"#{$font-size}\" == \"#{$size}\" {\n        $font-map: map-get($govuk-typography-scale, $font-size);\n      }\n    }\n  }\n\n  // Still no match? Throw error\n  @if not $font-map {\n    @error \"Unknown font size `#{$size}` - expected a point from the type scale.\";\n  }\n\n  // Check for a deprecation within the type scale\n  $deprecation: map-get($font-map, \"deprecation\");\n\n  @if $deprecation {\n    // Warn on deprecated font sizes unless flagged for internal use\n    @if not $size-internal-use-only {\n      @include _warning(map-get($deprecation, \"key\"), map-get($deprecation, \"message\"));\n    }\n\n    // remove the deprecation map keys so they do not break the breakpoint loop\n    $font-map: map-remove($font-map, \"deprecation\");\n  }\n\n  @each $breakpoint, $breakpoint-map in $font-map {\n    $font-size: map-get($breakpoint-map, \"font-size\");\n    $font-size-rem: govuk-px-to-rem($font-size);\n\n    // $calculated-line-height is a separate variable from $line-height,\n    // as otherwise the value would get redefined with each loop and\n    // eventually break _govuk-line-height.\n    //\n    // We continue to call the param $line-height to stay consistent with the\n    // naming with govuk-font.\n    $calculated-line-height: _govuk-line-height(\n      $line-height: if($line-height, $line-height, map-get($breakpoint-map, \"line-height\")),\n      $font-size: $font-size\n    );\n\n    // Mark rules as !important if $important is true - this will result in\n    // these variables becoming strings, so this needs to happen *after* they\n    // are used in calculations\n    $font-size: $font-size if($important, !important, null);\n    $font-size-rem: $font-size-rem if($important, !important, null);\n    $calculated-line-height: $calculated-line-height if($important, !important, null);\n\n    @if not $breakpoint {\n      font-size: $font-size-rem;\n      line-height: $calculated-line-height;\n    } @else if $breakpoint == \"print\" {\n      @include govuk-media-query($media-type: print) {\n        font-size: $font-size;\n        line-height: $calculated-line-height;\n      }\n    } @else {\n      @include govuk-media-query($from: $breakpoint) {\n        font-size: $font-size-rem;\n        line-height: $calculated-line-height;\n      }\n    }\n  }\n}\n\n/// Font helper\n///\n/// @param {Number | Boolean | String} $size Point from the type scale (the\n///   size as it would appear on tablet and above). Use `false` to avoid setting\n///   a size.\n/// @param {String} $weight [regular] - Weight: `bold` or `regular`\n/// @param {Boolean} $tabular [false] - Whether to use tabular numbers or not\n/// @param {Number} $line-height [false] - Line-height, if overriding the\n///   default\n///\n/// @throw if `$size` is not a valid point from the type scale (or false)\n///\n/// @access public\n\n@mixin govuk-font($size, $weight: regular, $tabular: false, $line-height: false) {\n  @include govuk-typography-common;\n\n  @if $tabular {\n    @include govuk-font-tabular-numbers;\n  }\n\n  @if $weight == regular {\n    @include govuk-typography-weight-regular;\n  } @else if $weight == bold {\n    @include govuk-typography-weight-bold;\n  }\n\n  @if $size {\n    @include govuk-font-size($size, $line-height);\n  }\n}\n\n/*# sourceMappingURL=_typography.scss.map */\n","////\n/// @group settings/typography\n////\n\n// =========================================================\n// Font families\n// =========================================================\n\n/// Font families to use for all typography on screen media\n///\n/// @type List\n/// @access public\n\n$govuk-font-family: \"GDS Transport\", arial, sans-serif !default;\n\n/// Font families to use for print media\n///\n/// We recommend that you use system fonts when printing. This will avoid issues\n/// with some printer drivers and operating systems.\n///\n/// @type List\n/// @access public\n\n$govuk-font-family-print: sans-serif !default;\n\n/// Include the default @font-face declarations\n///\n/// Defaults to true if \"GDS Transport\" appears in the $govuk-font-family\n/// setting.\n///\n/// @type Boolean\n/// @access public\n\n$govuk-include-default-font-face: if(index($govuk-font-family, \"GDS Transport\"), true, false) !default;\n\n// =========================================================\n// Font weights\n// =========================================================\n\n/// Font weight for regular typography\n///\n/// @type Number\n/// @access public\n$govuk-font-weight-regular: 400 !default;\n\n/// Font weight for bold typography\n///\n/// @type Number\n/// @access public\n$govuk-font-weight-bold: 700 !default;\n\n/*# sourceMappingURL=_typography-font.scss.map */\n","// mq() v4.0.2\n// sass-mq/sass-mq\n\n@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body::before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n\n/*# sourceMappingURL=_sass-mq.scss.map */\n"]}